pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = 'github-creds'      // Jenkins GitHub credentials
        DOCKER_CREDENTIALS = 'dockerhub-creds'   // Jenkins Docker Hub PAT
        REPO_URL = 'https://github.com/LewisMagangi/alx-backend-python.git'
        PYTHON_ENV = "${WORKSPACE}/venv"
        IMAGE_NAME = 'lewismagangi/alx-backend-python' // Docker Hub repository
        IMAGE_TAG = "latest"  // You can make this dynamic using commit hash if you want
    }

    stages {
        stage('Checkout Source') {
            steps {
                echo 'üì• Checking out source code...'
                git branch: 'master',
                    url: "${REPO_URL}",
                    credentialsId: "${GITHUB_CREDENTIALS}"
            }
        }

        stage('Set Up Python Environment') {
            steps {
                echo 'üêç Setting up a Python virtual environment...'
                sh '''#!/bin/bash
                    set -e
                    python3 -m venv venv
                    source venv/bin/activate
                    python -m pip install --upgrade pip
                    pip install -r messaging_app/requirements.txt
                    pip install pytest
                '''
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Running pytest on the new test file only...'
                sh '''#!/bin/bash
                    set -e
                    source venv/bin/activate
                    pytest messaging_app/messaging_app/tests/test_basic.py --junitxml=report.xml
                '''
            }
            post {
                always {
                    junit 'report.xml'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                sh '''#!/bin/bash
                    set -e
                    docker build -t ${IMAGE_NAME}:${IMAGE_TAG} messaging_app
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                echo '‚¨ÜÔ∏è Pushing Docker image to Docker Hub...'
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                    sh '''#!/bin/bash
                        set -e
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build, tests, and Docker push completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
        }
    }
}
